/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xueershangda.tianxun.user.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-09-08")
public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable, Comparable<User> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("account", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REGISTER_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("registerDate", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_LOGIN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginDate", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField ASKER_FIELD_DESC = new org.apache.thrift.protocol.TField("asker", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField("answer", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField IDENTITY_CARD_FIELD_DESC = new org.apache.thrift.protocol.TField("identityCard", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField IDENTITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("identityType", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField ALIPAY_FIELD_DESC = new org.apache.thrift.protocol.TField("alipay", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField WEIXIN_FIELD_DESC = new org.apache.thrift.protocol.TField("weixin", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField QQ_FIELD_DESC = new org.apache.thrift.protocol.TField("qq", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("avatar", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.I64, (short)22);
  private static final org.apache.thrift.protocol.TField SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("summary", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField FOCUS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("focusNumber", org.apache.thrift.protocol.TType.I64, (short)26);
  private static final org.apache.thrift.protocol.TField LOVE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("loveNumber", org.apache.thrift.protocol.TType.I64, (short)27);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("pageSize", org.apache.thrift.protocol.TType.I32, (short)29);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserTupleSchemeFactory();

  public String id; // optional
  public String name; // optional
  public String nickName; // optional
  public String account; // optional
  public String email; // optional
  public String mobile; // optional
  public String password; // optional
  public long registerDate; // optional
  public int age; // optional
  public long lastLoginDate; // optional
  public int state; // optional
  public int level; // optional
  public int asker; // optional
  public int answer; // optional
  public String identityCard; // optional
  public int identityType; // optional
  public String alipay; // optional
  public String weixin; // optional
  public String qq; // optional
  public String address; // optional
  public String avatar; // optional
  public long birthday; // optional
  public String summary; // optional
  public String signature; // optional
  public String title; // optional
  public long focusNumber; // optional
  public long loveNumber; // optional
  public int page; // optional
  public int pageSize; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    NICK_NAME((short)3, "nickName"),
    ACCOUNT((short)4, "account"),
    EMAIL((short)5, "email"),
    MOBILE((short)6, "mobile"),
    PASSWORD((short)7, "password"),
    REGISTER_DATE((short)8, "registerDate"),
    AGE((short)9, "age"),
    LAST_LOGIN_DATE((short)10, "lastLoginDate"),
    STATE((short)11, "state"),
    LEVEL((short)12, "level"),
    ASKER((short)13, "asker"),
    ANSWER((short)14, "answer"),
    IDENTITY_CARD((short)15, "identityCard"),
    IDENTITY_TYPE((short)16, "identityType"),
    ALIPAY((short)17, "alipay"),
    WEIXIN((short)18, "weixin"),
    QQ((short)19, "qq"),
    ADDRESS((short)20, "address"),
    AVATAR((short)21, "avatar"),
    BIRTHDAY((short)22, "birthday"),
    SUMMARY((short)23, "summary"),
    SIGNATURE((short)24, "signature"),
    TITLE((short)25, "title"),
    FOCUS_NUMBER((short)26, "focusNumber"),
    LOVE_NUMBER((short)27, "loveNumber"),
    PAGE((short)28, "page"),
    PAGE_SIZE((short)29, "pageSize");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // NICK_NAME
          return NICK_NAME;
        case 4: // ACCOUNT
          return ACCOUNT;
        case 5: // EMAIL
          return EMAIL;
        case 6: // MOBILE
          return MOBILE;
        case 7: // PASSWORD
          return PASSWORD;
        case 8: // REGISTER_DATE
          return REGISTER_DATE;
        case 9: // AGE
          return AGE;
        case 10: // LAST_LOGIN_DATE
          return LAST_LOGIN_DATE;
        case 11: // STATE
          return STATE;
        case 12: // LEVEL
          return LEVEL;
        case 13: // ASKER
          return ASKER;
        case 14: // ANSWER
          return ANSWER;
        case 15: // IDENTITY_CARD
          return IDENTITY_CARD;
        case 16: // IDENTITY_TYPE
          return IDENTITY_TYPE;
        case 17: // ALIPAY
          return ALIPAY;
        case 18: // WEIXIN
          return WEIXIN;
        case 19: // QQ
          return QQ;
        case 20: // ADDRESS
          return ADDRESS;
        case 21: // AVATAR
          return AVATAR;
        case 22: // BIRTHDAY
          return BIRTHDAY;
        case 23: // SUMMARY
          return SUMMARY;
        case 24: // SIGNATURE
          return SIGNATURE;
        case 25: // TITLE
          return TITLE;
        case 26: // FOCUS_NUMBER
          return FOCUS_NUMBER;
        case 27: // LOVE_NUMBER
          return LOVE_NUMBER;
        case 28: // PAGE
          return PAGE;
        case 29: // PAGE_SIZE
          return PAGE_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REGISTERDATE_ISSET_ID = 0;
  private static final int __AGE_ISSET_ID = 1;
  private static final int __LASTLOGINDATE_ISSET_ID = 2;
  private static final int __STATE_ISSET_ID = 3;
  private static final int __LEVEL_ISSET_ID = 4;
  private static final int __ASKER_ISSET_ID = 5;
  private static final int __ANSWER_ISSET_ID = 6;
  private static final int __IDENTITYTYPE_ISSET_ID = 7;
  private static final int __BIRTHDAY_ISSET_ID = 8;
  private static final int __FOCUSNUMBER_ISSET_ID = 9;
  private static final int __LOVENUMBER_ISSET_ID = 10;
  private static final int __PAGE_ISSET_ID = 11;
  private static final int __PAGESIZE_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID, _Fields.NAME, _Fields.NICK_NAME, _Fields.ACCOUNT, _Fields.EMAIL, _Fields.MOBILE, _Fields.PASSWORD, _Fields.REGISTER_DATE, _Fields.AGE, _Fields.LAST_LOGIN_DATE, _Fields.STATE, _Fields.LEVEL, _Fields.ASKER, _Fields.ANSWER, _Fields.IDENTITY_CARD, _Fields.IDENTITY_TYPE, _Fields.ALIPAY, _Fields.WEIXIN, _Fields.QQ, _Fields.ADDRESS, _Fields.AVATAR, _Fields.BIRTHDAY, _Fields.SUMMARY, _Fields.SIGNATURE, _Fields.TITLE, _Fields.FOCUS_NUMBER, _Fields.LOVE_NUMBER, _Fields.PAGE, _Fields.PAGE_SIZE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("account", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGISTER_DATE, new org.apache.thrift.meta_data.FieldMetaData("registerDate", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_LOGIN_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastLoginDate", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASKER, new org.apache.thrift.meta_data.FieldMetaData("asker", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANSWER, new org.apache.thrift.meta_data.FieldMetaData("answer", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IDENTITY_CARD, new org.apache.thrift.meta_data.FieldMetaData("identityCard", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("identityType", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ALIPAY, new org.apache.thrift.meta_data.FieldMetaData("alipay", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEIXIN, new org.apache.thrift.meta_data.FieldMetaData("weixin", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.QQ, new org.apache.thrift.meta_data.FieldMetaData("qq", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("address", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AVATAR, new org.apache.thrift.meta_data.FieldMetaData("avatar", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("summary", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FOCUS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("focusNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOVE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("loveNumber", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("pageSize", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
    this.page = 1;

    this.pageSize = 20;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetAccount()) {
      this.account = other.account;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetMobile()) {
      this.mobile = other.mobile;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.registerDate = other.registerDate;
    this.age = other.age;
    this.lastLoginDate = other.lastLoginDate;
    this.state = other.state;
    this.level = other.level;
    this.asker = other.asker;
    this.answer = other.answer;
    if (other.isSetIdentityCard()) {
      this.identityCard = other.identityCard;
    }
    this.identityType = other.identityType;
    if (other.isSetAlipay()) {
      this.alipay = other.alipay;
    }
    if (other.isSetWeixin()) {
      this.weixin = other.weixin;
    }
    if (other.isSetQq()) {
      this.qq = other.qq;
    }
    if (other.isSetAddress()) {
      this.address = other.address;
    }
    if (other.isSetAvatar()) {
      this.avatar = other.avatar;
    }
    this.birthday = other.birthday;
    if (other.isSetSummary()) {
      this.summary = other.summary;
    }
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.focusNumber = other.focusNumber;
    this.loveNumber = other.loveNumber;
    this.page = other.page;
    this.pageSize = other.pageSize;
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.nickName = null;
    this.account = null;
    this.email = null;
    this.mobile = null;
    this.password = null;
    setRegisterDateIsSet(false);
    this.registerDate = 0;
    setAgeIsSet(false);
    this.age = 0;
    setLastLoginDateIsSet(false);
    this.lastLoginDate = 0;
    setStateIsSet(false);
    this.state = 0;
    setLevelIsSet(false);
    this.level = 0;
    setAskerIsSet(false);
    this.asker = 0;
    setAnswerIsSet(false);
    this.answer = 0;
    this.identityCard = null;
    setIdentityTypeIsSet(false);
    this.identityType = 0;
    this.alipay = null;
    this.weixin = null;
    this.qq = null;
    this.address = null;
    this.avatar = null;
    setBirthdayIsSet(false);
    this.birthday = 0;
    this.summary = null;
    this.signature = null;
    this.title = null;
    setFocusNumberIsSet(false);
    this.focusNumber = 0;
    setLoveNumberIsSet(false);
    this.loveNumber = 0;
    this.page = 1;

    this.pageSize = 20;

  }

  public String getId() {
    return this.id;
  }

  public User setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public User setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getNickName() {
    return this.nickName;
  }

  public User setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  public String getAccount() {
    return this.account;
  }

  public User setAccount(String account) {
    this.account = account;
    return this;
  }

  public void unsetAccount() {
    this.account = null;
  }

  /** Returns true if field account is set (has been assigned a value) and false otherwise */
  public boolean isSetAccount() {
    return this.account != null;
  }

  public void setAccountIsSet(boolean value) {
    if (!value) {
      this.account = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public User setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getMobile() {
    return this.mobile;
  }

  public User setMobile(String mobile) {
    this.mobile = mobile;
    return this;
  }

  public void unsetMobile() {
    this.mobile = null;
  }

  /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
  public boolean isSetMobile() {
    return this.mobile != null;
  }

  public void setMobileIsSet(boolean value) {
    if (!value) {
      this.mobile = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public User setPassword(String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public long getRegisterDate() {
    return this.registerDate;
  }

  public User setRegisterDate(long registerDate) {
    this.registerDate = registerDate;
    setRegisterDateIsSet(true);
    return this;
  }

  public void unsetRegisterDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REGISTERDATE_ISSET_ID);
  }

  /** Returns true if field registerDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRegisterDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REGISTERDATE_ISSET_ID);
  }

  public void setRegisterDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REGISTERDATE_ISSET_ID, value);
  }

  public int getAge() {
    return this.age;
  }

  public User setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public long getLastLoginDate() {
    return this.lastLoginDate;
  }

  public User setLastLoginDate(long lastLoginDate) {
    this.lastLoginDate = lastLoginDate;
    setLastLoginDateIsSet(true);
    return this;
  }

  public void unsetLastLoginDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTLOGINDATE_ISSET_ID);
  }

  /** Returns true if field lastLoginDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTLOGINDATE_ISSET_ID);
  }

  public void setLastLoginDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTLOGINDATE_ISSET_ID, value);
  }

  public int getState() {
    return this.state;
  }

  public User setState(int state) {
    this.state = state;
    setStateIsSet(true);
    return this;
  }

  public void unsetState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
  }

  public void setStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public User setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public int getAsker() {
    return this.asker;
  }

  public User setAsker(int asker) {
    this.asker = asker;
    setAskerIsSet(true);
    return this;
  }

  public void unsetAsker() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASKER_ISSET_ID);
  }

  /** Returns true if field asker is set (has been assigned a value) and false otherwise */
  public boolean isSetAsker() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASKER_ISSET_ID);
  }

  public void setAskerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASKER_ISSET_ID, value);
  }

  public int getAnswer() {
    return this.answer;
  }

  public User setAnswer(int answer) {
    this.answer = answer;
    setAnswerIsSet(true);
    return this;
  }

  public void unsetAnswer() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANSWER_ISSET_ID);
  }

  /** Returns true if field answer is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswer() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANSWER_ISSET_ID);
  }

  public void setAnswerIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANSWER_ISSET_ID, value);
  }

  public String getIdentityCard() {
    return this.identityCard;
  }

  public User setIdentityCard(String identityCard) {
    this.identityCard = identityCard;
    return this;
  }

  public void unsetIdentityCard() {
    this.identityCard = null;
  }

  /** Returns true if field identityCard is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityCard() {
    return this.identityCard != null;
  }

  public void setIdentityCardIsSet(boolean value) {
    if (!value) {
      this.identityCard = null;
    }
  }

  public int getIdentityType() {
    return this.identityType;
  }

  public User setIdentityType(int identityType) {
    this.identityType = identityType;
    setIdentityTypeIsSet(true);
    return this;
  }

  public void unsetIdentityType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IDENTITYTYPE_ISSET_ID);
  }

  /** Returns true if field identityType is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IDENTITYTYPE_ISSET_ID);
  }

  public void setIdentityTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IDENTITYTYPE_ISSET_ID, value);
  }

  public String getAlipay() {
    return this.alipay;
  }

  public User setAlipay(String alipay) {
    this.alipay = alipay;
    return this;
  }

  public void unsetAlipay() {
    this.alipay = null;
  }

  /** Returns true if field alipay is set (has been assigned a value) and false otherwise */
  public boolean isSetAlipay() {
    return this.alipay != null;
  }

  public void setAlipayIsSet(boolean value) {
    if (!value) {
      this.alipay = null;
    }
  }

  public String getWeixin() {
    return this.weixin;
  }

  public User setWeixin(String weixin) {
    this.weixin = weixin;
    return this;
  }

  public void unsetWeixin() {
    this.weixin = null;
  }

  /** Returns true if field weixin is set (has been assigned a value) and false otherwise */
  public boolean isSetWeixin() {
    return this.weixin != null;
  }

  public void setWeixinIsSet(boolean value) {
    if (!value) {
      this.weixin = null;
    }
  }

  public String getQq() {
    return this.qq;
  }

  public User setQq(String qq) {
    this.qq = qq;
    return this;
  }

  public void unsetQq() {
    this.qq = null;
  }

  /** Returns true if field qq is set (has been assigned a value) and false otherwise */
  public boolean isSetQq() {
    return this.qq != null;
  }

  public void setQqIsSet(boolean value) {
    if (!value) {
      this.qq = null;
    }
  }

  public String getAddress() {
    return this.address;
  }

  public User setAddress(String address) {
    this.address = address;
    return this;
  }

  public void unsetAddress() {
    this.address = null;
  }

  /** Returns true if field address is set (has been assigned a value) and false otherwise */
  public boolean isSetAddress() {
    return this.address != null;
  }

  public void setAddressIsSet(boolean value) {
    if (!value) {
      this.address = null;
    }
  }

  public String getAvatar() {
    return this.avatar;
  }

  public User setAvatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  public void unsetAvatar() {
    this.avatar = null;
  }

  /** Returns true if field avatar is set (has been assigned a value) and false otherwise */
  public boolean isSetAvatar() {
    return this.avatar != null;
  }

  public void setAvatarIsSet(boolean value) {
    if (!value) {
      this.avatar = null;
    }
  }

  public long getBirthday() {
    return this.birthday;
  }

  public User setBirthday(long birthday) {
    this.birthday = birthday;
    setBirthdayIsSet(true);
    return this;
  }

  public void unsetBirthday() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BIRTHDAY_ISSET_ID);
  }

  public void setBirthdayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BIRTHDAY_ISSET_ID, value);
  }

  public String getSummary() {
    return this.summary;
  }

  public User setSummary(String summary) {
    this.summary = summary;
    return this;
  }

  public void unsetSummary() {
    this.summary = null;
  }

  /** Returns true if field summary is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary() {
    return this.summary != null;
  }

  public void setSummaryIsSet(boolean value) {
    if (!value) {
      this.summary = null;
    }
  }

  public String getSignature() {
    return this.signature;
  }

  public User setSignature(String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public User setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public long getFocusNumber() {
    return this.focusNumber;
  }

  public User setFocusNumber(long focusNumber) {
    this.focusNumber = focusNumber;
    setFocusNumberIsSet(true);
    return this;
  }

  public void unsetFocusNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FOCUSNUMBER_ISSET_ID);
  }

  /** Returns true if field focusNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetFocusNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FOCUSNUMBER_ISSET_ID);
  }

  public void setFocusNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FOCUSNUMBER_ISSET_ID, value);
  }

  public long getLoveNumber() {
    return this.loveNumber;
  }

  public User setLoveNumber(long loveNumber) {
    this.loveNumber = loveNumber;
    setLoveNumberIsSet(true);
    return this;
  }

  public void unsetLoveNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOVENUMBER_ISSET_ID);
  }

  /** Returns true if field loveNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetLoveNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOVENUMBER_ISSET_ID);
  }

  public void setLoveNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOVENUMBER_ISSET_ID, value);
  }

  public int getPage() {
    return this.page;
  }

  public User setPage(int page) {
    this.page = page;
    setPageIsSet(true);
    return this;
  }

  public void unsetPage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGE_ISSET_ID);
  }

  public void setPageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGE_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.pageSize;
  }

  public User setPageSize(int pageSize) {
    this.pageSize = pageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field pageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case ACCOUNT:
      if (value == null) {
        unsetAccount();
      } else {
        setAccount((String)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    case MOBILE:
      if (value == null) {
        unsetMobile();
      } else {
        setMobile((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case REGISTER_DATE:
      if (value == null) {
        unsetRegisterDate();
      } else {
        setRegisterDate((Long)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((Integer)value);
      }
      break;

    case LAST_LOGIN_DATE:
      if (value == null) {
        unsetLastLoginDate();
      } else {
        setLastLoginDate((Long)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((Integer)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case ASKER:
      if (value == null) {
        unsetAsker();
      } else {
        setAsker((Integer)value);
      }
      break;

    case ANSWER:
      if (value == null) {
        unsetAnswer();
      } else {
        setAnswer((Integer)value);
      }
      break;

    case IDENTITY_CARD:
      if (value == null) {
        unsetIdentityCard();
      } else {
        setIdentityCard((String)value);
      }
      break;

    case IDENTITY_TYPE:
      if (value == null) {
        unsetIdentityType();
      } else {
        setIdentityType((Integer)value);
      }
      break;

    case ALIPAY:
      if (value == null) {
        unsetAlipay();
      } else {
        setAlipay((String)value);
      }
      break;

    case WEIXIN:
      if (value == null) {
        unsetWeixin();
      } else {
        setWeixin((String)value);
      }
      break;

    case QQ:
      if (value == null) {
        unsetQq();
      } else {
        setQq((String)value);
      }
      break;

    case ADDRESS:
      if (value == null) {
        unsetAddress();
      } else {
        setAddress((String)value);
      }
      break;

    case AVATAR:
      if (value == null) {
        unsetAvatar();
      } else {
        setAvatar((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((Long)value);
      }
      break;

    case SUMMARY:
      if (value == null) {
        unsetSummary();
      } else {
        setSummary((String)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case FOCUS_NUMBER:
      if (value == null) {
        unsetFocusNumber();
      } else {
        setFocusNumber((Long)value);
      }
      break;

    case LOVE_NUMBER:
      if (value == null) {
        unsetLoveNumber();
      } else {
        setLoveNumber((Long)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case NICK_NAME:
      return getNickName();

    case ACCOUNT:
      return getAccount();

    case EMAIL:
      return getEmail();

    case MOBILE:
      return getMobile();

    case PASSWORD:
      return getPassword();

    case REGISTER_DATE:
      return getRegisterDate();

    case AGE:
      return getAge();

    case LAST_LOGIN_DATE:
      return getLastLoginDate();

    case STATE:
      return getState();

    case LEVEL:
      return getLevel();

    case ASKER:
      return getAsker();

    case ANSWER:
      return getAnswer();

    case IDENTITY_CARD:
      return getIdentityCard();

    case IDENTITY_TYPE:
      return getIdentityType();

    case ALIPAY:
      return getAlipay();

    case WEIXIN:
      return getWeixin();

    case QQ:
      return getQq();

    case ADDRESS:
      return getAddress();

    case AVATAR:
      return getAvatar();

    case BIRTHDAY:
      return getBirthday();

    case SUMMARY:
      return getSummary();

    case SIGNATURE:
      return getSignature();

    case TITLE:
      return getTitle();

    case FOCUS_NUMBER:
      return getFocusNumber();

    case LOVE_NUMBER:
      return getLoveNumber();

    case PAGE:
      return getPage();

    case PAGE_SIZE:
      return getPageSize();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case NICK_NAME:
      return isSetNickName();
    case ACCOUNT:
      return isSetAccount();
    case EMAIL:
      return isSetEmail();
    case MOBILE:
      return isSetMobile();
    case PASSWORD:
      return isSetPassword();
    case REGISTER_DATE:
      return isSetRegisterDate();
    case AGE:
      return isSetAge();
    case LAST_LOGIN_DATE:
      return isSetLastLoginDate();
    case STATE:
      return isSetState();
    case LEVEL:
      return isSetLevel();
    case ASKER:
      return isSetAsker();
    case ANSWER:
      return isSetAnswer();
    case IDENTITY_CARD:
      return isSetIdentityCard();
    case IDENTITY_TYPE:
      return isSetIdentityType();
    case ALIPAY:
      return isSetAlipay();
    case WEIXIN:
      return isSetWeixin();
    case QQ:
      return isSetQq();
    case ADDRESS:
      return isSetAddress();
    case AVATAR:
      return isSetAvatar();
    case BIRTHDAY:
      return isSetBirthday();
    case SUMMARY:
      return isSetSummary();
    case SIGNATURE:
      return isSetSignature();
    case TITLE:
      return isSetTitle();
    case FOCUS_NUMBER:
      return isSetFocusNumber();
    case LOVE_NUMBER:
      return isSetLoveNumber();
    case PAGE:
      return isSetPage();
    case PAGE_SIZE:
      return isSetPageSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_account = true && this.isSetAccount();
    boolean that_present_account = true && that.isSetAccount();
    if (this_present_account || that_present_account) {
      if (!(this_present_account && that_present_account))
        return false;
      if (!this.account.equals(that.account))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_mobile = true && this.isSetMobile();
    boolean that_present_mobile = true && that.isSetMobile();
    if (this_present_mobile || that_present_mobile) {
      if (!(this_present_mobile && that_present_mobile))
        return false;
      if (!this.mobile.equals(that.mobile))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_registerDate = true && this.isSetRegisterDate();
    boolean that_present_registerDate = true && that.isSetRegisterDate();
    if (this_present_registerDate || that_present_registerDate) {
      if (!(this_present_registerDate && that_present_registerDate))
        return false;
      if (this.registerDate != that.registerDate)
        return false;
    }

    boolean this_present_age = true && this.isSetAge();
    boolean that_present_age = true && that.isSetAge();
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_lastLoginDate = true && this.isSetLastLoginDate();
    boolean that_present_lastLoginDate = true && that.isSetLastLoginDate();
    if (this_present_lastLoginDate || that_present_lastLoginDate) {
      if (!(this_present_lastLoginDate && that_present_lastLoginDate))
        return false;
      if (this.lastLoginDate != that.lastLoginDate)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (this.state != that.state)
        return false;
    }

    boolean this_present_level = true && this.isSetLevel();
    boolean that_present_level = true && that.isSetLevel();
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_asker = true && this.isSetAsker();
    boolean that_present_asker = true && that.isSetAsker();
    if (this_present_asker || that_present_asker) {
      if (!(this_present_asker && that_present_asker))
        return false;
      if (this.asker != that.asker)
        return false;
    }

    boolean this_present_answer = true && this.isSetAnswer();
    boolean that_present_answer = true && that.isSetAnswer();
    if (this_present_answer || that_present_answer) {
      if (!(this_present_answer && that_present_answer))
        return false;
      if (this.answer != that.answer)
        return false;
    }

    boolean this_present_identityCard = true && this.isSetIdentityCard();
    boolean that_present_identityCard = true && that.isSetIdentityCard();
    if (this_present_identityCard || that_present_identityCard) {
      if (!(this_present_identityCard && that_present_identityCard))
        return false;
      if (!this.identityCard.equals(that.identityCard))
        return false;
    }

    boolean this_present_identityType = true && this.isSetIdentityType();
    boolean that_present_identityType = true && that.isSetIdentityType();
    if (this_present_identityType || that_present_identityType) {
      if (!(this_present_identityType && that_present_identityType))
        return false;
      if (this.identityType != that.identityType)
        return false;
    }

    boolean this_present_alipay = true && this.isSetAlipay();
    boolean that_present_alipay = true && that.isSetAlipay();
    if (this_present_alipay || that_present_alipay) {
      if (!(this_present_alipay && that_present_alipay))
        return false;
      if (!this.alipay.equals(that.alipay))
        return false;
    }

    boolean this_present_weixin = true && this.isSetWeixin();
    boolean that_present_weixin = true && that.isSetWeixin();
    if (this_present_weixin || that_present_weixin) {
      if (!(this_present_weixin && that_present_weixin))
        return false;
      if (!this.weixin.equals(that.weixin))
        return false;
    }

    boolean this_present_qq = true && this.isSetQq();
    boolean that_present_qq = true && that.isSetQq();
    if (this_present_qq || that_present_qq) {
      if (!(this_present_qq && that_present_qq))
        return false;
      if (!this.qq.equals(that.qq))
        return false;
    }

    boolean this_present_address = true && this.isSetAddress();
    boolean that_present_address = true && that.isSetAddress();
    if (this_present_address || that_present_address) {
      if (!(this_present_address && that_present_address))
        return false;
      if (!this.address.equals(that.address))
        return false;
    }

    boolean this_present_avatar = true && this.isSetAvatar();
    boolean that_present_avatar = true && that.isSetAvatar();
    if (this_present_avatar || that_present_avatar) {
      if (!(this_present_avatar && that_present_avatar))
        return false;
      if (!this.avatar.equals(that.avatar))
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (this.birthday != that.birthday)
        return false;
    }

    boolean this_present_summary = true && this.isSetSummary();
    boolean that_present_summary = true && that.isSetSummary();
    if (this_present_summary || that_present_summary) {
      if (!(this_present_summary && that_present_summary))
        return false;
      if (!this.summary.equals(that.summary))
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_focusNumber = true && this.isSetFocusNumber();
    boolean that_present_focusNumber = true && that.isSetFocusNumber();
    if (this_present_focusNumber || that_present_focusNumber) {
      if (!(this_present_focusNumber && that_present_focusNumber))
        return false;
      if (this.focusNumber != that.focusNumber)
        return false;
    }

    boolean this_present_loveNumber = true && this.isSetLoveNumber();
    boolean that_present_loveNumber = true && that.isSetLoveNumber();
    if (this_present_loveNumber || that_present_loveNumber) {
      if (!(this_present_loveNumber && that_present_loveNumber))
        return false;
      if (this.loveNumber != that.loveNumber)
        return false;
    }

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (this.page != that.page)
        return false;
    }

    boolean this_present_pageSize = true && this.isSetPageSize();
    boolean that_present_pageSize = true && that.isSetPageSize();
    if (this_present_pageSize || that_present_pageSize) {
      if (!(this_present_pageSize && that_present_pageSize))
        return false;
      if (this.pageSize != that.pageSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetNickName()) ? 131071 : 524287);
    if (isSetNickName())
      hashCode = hashCode * 8191 + nickName.hashCode();

    hashCode = hashCode * 8191 + ((isSetAccount()) ? 131071 : 524287);
    if (isSetAccount())
      hashCode = hashCode * 8191 + account.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail()) ? 131071 : 524287);
    if (isSetEmail())
      hashCode = hashCode * 8191 + email.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
    if (isSetMobile())
      hashCode = hashCode * 8191 + mobile.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegisterDate()) ? 131071 : 524287);
    if (isSetRegisterDate())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(registerDate);

    hashCode = hashCode * 8191 + ((isSetAge()) ? 131071 : 524287);
    if (isSetAge())
      hashCode = hashCode * 8191 + age;

    hashCode = hashCode * 8191 + ((isSetLastLoginDate()) ? 131071 : 524287);
    if (isSetLastLoginDate())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastLoginDate);

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state;

    hashCode = hashCode * 8191 + ((isSetLevel()) ? 131071 : 524287);
    if (isSetLevel())
      hashCode = hashCode * 8191 + level;

    hashCode = hashCode * 8191 + ((isSetAsker()) ? 131071 : 524287);
    if (isSetAsker())
      hashCode = hashCode * 8191 + asker;

    hashCode = hashCode * 8191 + ((isSetAnswer()) ? 131071 : 524287);
    if (isSetAnswer())
      hashCode = hashCode * 8191 + answer;

    hashCode = hashCode * 8191 + ((isSetIdentityCard()) ? 131071 : 524287);
    if (isSetIdentityCard())
      hashCode = hashCode * 8191 + identityCard.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdentityType()) ? 131071 : 524287);
    if (isSetIdentityType())
      hashCode = hashCode * 8191 + identityType;

    hashCode = hashCode * 8191 + ((isSetAlipay()) ? 131071 : 524287);
    if (isSetAlipay())
      hashCode = hashCode * 8191 + alipay.hashCode();

    hashCode = hashCode * 8191 + ((isSetWeixin()) ? 131071 : 524287);
    if (isSetWeixin())
      hashCode = hashCode * 8191 + weixin.hashCode();

    hashCode = hashCode * 8191 + ((isSetQq()) ? 131071 : 524287);
    if (isSetQq())
      hashCode = hashCode * 8191 + qq.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddress()) ? 131071 : 524287);
    if (isSetAddress())
      hashCode = hashCode * 8191 + address.hashCode();

    hashCode = hashCode * 8191 + ((isSetAvatar()) ? 131071 : 524287);
    if (isSetAvatar())
      hashCode = hashCode * 8191 + avatar.hashCode();

    hashCode = hashCode * 8191 + ((isSetBirthday()) ? 131071 : 524287);
    if (isSetBirthday())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(birthday);

    hashCode = hashCode * 8191 + ((isSetSummary()) ? 131071 : 524287);
    if (isSetSummary())
      hashCode = hashCode * 8191 + summary.hashCode();

    hashCode = hashCode * 8191 + ((isSetSignature()) ? 131071 : 524287);
    if (isSetSignature())
      hashCode = hashCode * 8191 + signature.hashCode();

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetFocusNumber()) ? 131071 : 524287);
    if (isSetFocusNumber())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(focusNumber);

    hashCode = hashCode * 8191 + ((isSetLoveNumber()) ? 131071 : 524287);
    if (isSetLoveNumber())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(loveNumber);

    hashCode = hashCode * 8191 + ((isSetPage()) ? 131071 : 524287);
    if (isSetPage())
      hashCode = hashCode * 8191 + page;

    hashCode = hashCode * 8191 + ((isSetPageSize()) ? 131071 : 524287);
    if (isSetPageSize())
      hashCode = hashCode * 8191 + pageSize;

    return hashCode;
  }

  @Override
  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccount()).compareTo(other.isSetAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.account, other.account);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegisterDate()).compareTo(other.isSetRegisterDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegisterDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registerDate, other.registerDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastLoginDate()).compareTo(other.isSetLastLoginDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginDate, other.lastLoginDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(other.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, other.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAsker()).compareTo(other.isSetAsker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asker, other.asker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswer()).compareTo(other.isSetAnswer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answer, other.answer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityCard()).compareTo(other.isSetIdentityCard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityCard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityCard, other.identityCard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIdentityType()).compareTo(other.isSetIdentityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityType, other.identityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlipay()).compareTo(other.isSetAlipay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlipay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alipay, other.alipay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeixin()).compareTo(other.isSetWeixin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeixin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weixin, other.weixin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQq()).compareTo(other.isSetQq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qq, other.qq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvatar()).compareTo(other.isSetAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avatar, other.avatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(other.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, other.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSummary()).compareTo(other.isSetSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary, other.summary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFocusNumber()).compareTo(other.isSetFocusNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFocusNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.focusNumber, other.focusNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoveNumber()).compareTo(other.isSetLoveNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoveNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loveNumber, other.loveNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(other.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, other.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageSize, other.pageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetNickName()) {
      if (!first) sb.append(", ");
      sb.append("nickName:");
      if (this.nickName == null) {
        sb.append("null");
      } else {
        sb.append(this.nickName);
      }
      first = false;
    }
    if (isSetAccount()) {
      if (!first) sb.append(", ");
      sb.append("account:");
      if (this.account == null) {
        sb.append("null");
      } else {
        sb.append(this.account);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    if (isSetMobile()) {
      if (!first) sb.append(", ");
      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetRegisterDate()) {
      if (!first) sb.append(", ");
      sb.append("registerDate:");
      sb.append(this.registerDate);
      first = false;
    }
    if (isSetAge()) {
      if (!first) sb.append(", ");
      sb.append("age:");
      sb.append(this.age);
      first = false;
    }
    if (isSetLastLoginDate()) {
      if (!first) sb.append(", ");
      sb.append("lastLoginDate:");
      sb.append(this.lastLoginDate);
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
    }
    if (isSetLevel()) {
      if (!first) sb.append(", ");
      sb.append("level:");
      sb.append(this.level);
      first = false;
    }
    if (isSetAsker()) {
      if (!first) sb.append(", ");
      sb.append("asker:");
      sb.append(this.asker);
      first = false;
    }
    if (isSetAnswer()) {
      if (!first) sb.append(", ");
      sb.append("answer:");
      sb.append(this.answer);
      first = false;
    }
    if (isSetIdentityCard()) {
      if (!first) sb.append(", ");
      sb.append("identityCard:");
      if (this.identityCard == null) {
        sb.append("null");
      } else {
        sb.append(this.identityCard);
      }
      first = false;
    }
    if (isSetIdentityType()) {
      if (!first) sb.append(", ");
      sb.append("identityType:");
      sb.append(this.identityType);
      first = false;
    }
    if (isSetAlipay()) {
      if (!first) sb.append(", ");
      sb.append("alipay:");
      if (this.alipay == null) {
        sb.append("null");
      } else {
        sb.append(this.alipay);
      }
      first = false;
    }
    if (isSetWeixin()) {
      if (!first) sb.append(", ");
      sb.append("weixin:");
      if (this.weixin == null) {
        sb.append("null");
      } else {
        sb.append(this.weixin);
      }
      first = false;
    }
    if (isSetQq()) {
      if (!first) sb.append(", ");
      sb.append("qq:");
      if (this.qq == null) {
        sb.append("null");
      } else {
        sb.append(this.qq);
      }
      first = false;
    }
    if (isSetAddress()) {
      if (!first) sb.append(", ");
      sb.append("address:");
      if (this.address == null) {
        sb.append("null");
      } else {
        sb.append(this.address);
      }
      first = false;
    }
    if (isSetAvatar()) {
      if (!first) sb.append(", ");
      sb.append("avatar:");
      if (this.avatar == null) {
        sb.append("null");
      } else {
        sb.append(this.avatar);
      }
      first = false;
    }
    if (isSetBirthday()) {
      if (!first) sb.append(", ");
      sb.append("birthday:");
      sb.append(this.birthday);
      first = false;
    }
    if (isSetSummary()) {
      if (!first) sb.append(", ");
      sb.append("summary:");
      if (this.summary == null) {
        sb.append("null");
      } else {
        sb.append(this.summary);
      }
      first = false;
    }
    if (isSetSignature()) {
      if (!first) sb.append(", ");
      sb.append("signature:");
      if (this.signature == null) {
        sb.append("null");
      } else {
        sb.append(this.signature);
      }
      first = false;
    }
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetFocusNumber()) {
      if (!first) sb.append(", ");
      sb.append("focusNumber:");
      sb.append(this.focusNumber);
      first = false;
    }
    if (isSetLoveNumber()) {
      if (!first) sb.append(", ");
      sb.append("loveNumber:");
      sb.append(this.loveNumber);
      first = false;
    }
    if (isSetPage()) {
      if (!first) sb.append(", ");
      sb.append("page:");
      sb.append(this.page);
      first = false;
    }
    if (isSetPageSize()) {
      if (!first) sb.append(", ");
      sb.append("pageSize:");
      sb.append(this.pageSize);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends org.apache.thrift.scheme.StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.account = iprot.readString();
              struct.setAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MOBILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobile = iprot.readString();
              struct.setMobileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REGISTER_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.registerDate = iprot.readI64();
              struct.setRegisterDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_LOGIN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastLoginDate = iprot.readI64();
              struct.setLastLoginDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = iprot.readI32();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ASKER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.asker = iprot.readI32();
              struct.setAskerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ANSWER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.answer = iprot.readI32();
              struct.setAnswerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IDENTITY_CARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityCard = iprot.readString();
              struct.setIdentityCardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IDENTITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.identityType = iprot.readI32();
              struct.setIdentityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ALIPAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.alipay = iprot.readString();
              struct.setAlipayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // WEIXIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.weixin = iprot.readString();
              struct.setWeixinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // QQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.qq = iprot.readString();
              struct.setQqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.address = iprot.readString();
              struct.setAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.avatar = iprot.readString();
              struct.setAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.birthday = iprot.readI64();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.summary = iprot.readString();
              struct.setSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // FOCUS_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.focusNumber = iprot.readI64();
              struct.setFocusNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // LOVE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.loveNumber = iprot.readI64();
              struct.setLoveNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.page = iprot.readI32();
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nickName != null) {
        if (struct.isSetNickName()) {
          oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
          oprot.writeString(struct.nickName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.account != null) {
        if (struct.isSetAccount()) {
          oprot.writeFieldBegin(ACCOUNT_FIELD_DESC);
          oprot.writeString(struct.account);
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobile != null) {
        if (struct.isSetMobile()) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRegisterDate()) {
        oprot.writeFieldBegin(REGISTER_DATE_FIELD_DESC);
        oprot.writeI64(struct.registerDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAge()) {
        oprot.writeFieldBegin(AGE_FIELD_DESC);
        oprot.writeI32(struct.age);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastLoginDate()) {
        oprot.writeFieldBegin(LAST_LOGIN_DATE_FIELD_DESC);
        oprot.writeI64(struct.lastLoginDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetState()) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLevel()) {
        oprot.writeFieldBegin(LEVEL_FIELD_DESC);
        oprot.writeI32(struct.level);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAsker()) {
        oprot.writeFieldBegin(ASKER_FIELD_DESC);
        oprot.writeI32(struct.asker);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAnswer()) {
        oprot.writeFieldBegin(ANSWER_FIELD_DESC);
        oprot.writeI32(struct.answer);
        oprot.writeFieldEnd();
      }
      if (struct.identityCard != null) {
        if (struct.isSetIdentityCard()) {
          oprot.writeFieldBegin(IDENTITY_CARD_FIELD_DESC);
          oprot.writeString(struct.identityCard);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIdentityType()) {
        oprot.writeFieldBegin(IDENTITY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.identityType);
        oprot.writeFieldEnd();
      }
      if (struct.alipay != null) {
        if (struct.isSetAlipay()) {
          oprot.writeFieldBegin(ALIPAY_FIELD_DESC);
          oprot.writeString(struct.alipay);
          oprot.writeFieldEnd();
        }
      }
      if (struct.weixin != null) {
        if (struct.isSetWeixin()) {
          oprot.writeFieldBegin(WEIXIN_FIELD_DESC);
          oprot.writeString(struct.weixin);
          oprot.writeFieldEnd();
        }
      }
      if (struct.qq != null) {
        if (struct.isSetQq()) {
          oprot.writeFieldBegin(QQ_FIELD_DESC);
          oprot.writeString(struct.qq);
          oprot.writeFieldEnd();
        }
      }
      if (struct.address != null) {
        if (struct.isSetAddress()) {
          oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
          oprot.writeString(struct.address);
          oprot.writeFieldEnd();
        }
      }
      if (struct.avatar != null) {
        if (struct.isSetAvatar()) {
          oprot.writeFieldBegin(AVATAR_FIELD_DESC);
          oprot.writeString(struct.avatar);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBirthday()) {
        oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
        oprot.writeI64(struct.birthday);
        oprot.writeFieldEnd();
      }
      if (struct.summary != null) {
        if (struct.isSetSummary()) {
          oprot.writeFieldBegin(SUMMARY_FIELD_DESC);
          oprot.writeString(struct.summary);
          oprot.writeFieldEnd();
        }
      }
      if (struct.signature != null) {
        if (struct.isSetSignature()) {
          oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
          oprot.writeString(struct.signature);
          oprot.writeFieldEnd();
        }
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFocusNumber()) {
        oprot.writeFieldBegin(FOCUS_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.focusNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLoveNumber()) {
        oprot.writeFieldBegin(LOVE_NUMBER_FIELD_DESC);
        oprot.writeI64(struct.loveNumber);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPage()) {
        oprot.writeFieldBegin(PAGE_FIELD_DESC);
        oprot.writeI32(struct.page);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPageSize()) {
        oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
        oprot.writeI32(struct.pageSize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends org.apache.thrift.scheme.TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetNickName()) {
        optionals.set(2);
      }
      if (struct.isSetAccount()) {
        optionals.set(3);
      }
      if (struct.isSetEmail()) {
        optionals.set(4);
      }
      if (struct.isSetMobile()) {
        optionals.set(5);
      }
      if (struct.isSetPassword()) {
        optionals.set(6);
      }
      if (struct.isSetRegisterDate()) {
        optionals.set(7);
      }
      if (struct.isSetAge()) {
        optionals.set(8);
      }
      if (struct.isSetLastLoginDate()) {
        optionals.set(9);
      }
      if (struct.isSetState()) {
        optionals.set(10);
      }
      if (struct.isSetLevel()) {
        optionals.set(11);
      }
      if (struct.isSetAsker()) {
        optionals.set(12);
      }
      if (struct.isSetAnswer()) {
        optionals.set(13);
      }
      if (struct.isSetIdentityCard()) {
        optionals.set(14);
      }
      if (struct.isSetIdentityType()) {
        optionals.set(15);
      }
      if (struct.isSetAlipay()) {
        optionals.set(16);
      }
      if (struct.isSetWeixin()) {
        optionals.set(17);
      }
      if (struct.isSetQq()) {
        optionals.set(18);
      }
      if (struct.isSetAddress()) {
        optionals.set(19);
      }
      if (struct.isSetAvatar()) {
        optionals.set(20);
      }
      if (struct.isSetBirthday()) {
        optionals.set(21);
      }
      if (struct.isSetSummary()) {
        optionals.set(22);
      }
      if (struct.isSetSignature()) {
        optionals.set(23);
      }
      if (struct.isSetTitle()) {
        optionals.set(24);
      }
      if (struct.isSetFocusNumber()) {
        optionals.set(25);
      }
      if (struct.isSetLoveNumber()) {
        optionals.set(26);
      }
      if (struct.isSetPage()) {
        optionals.set(27);
      }
      if (struct.isSetPageSize()) {
        optionals.set(28);
      }
      oprot.writeBitSet(optionals, 29);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetAccount()) {
        oprot.writeString(struct.account);
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
      if (struct.isSetMobile()) {
        oprot.writeString(struct.mobile);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetRegisterDate()) {
        oprot.writeI64(struct.registerDate);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetLastLoginDate()) {
        oprot.writeI64(struct.lastLoginDate);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state);
      }
      if (struct.isSetLevel()) {
        oprot.writeI32(struct.level);
      }
      if (struct.isSetAsker()) {
        oprot.writeI32(struct.asker);
      }
      if (struct.isSetAnswer()) {
        oprot.writeI32(struct.answer);
      }
      if (struct.isSetIdentityCard()) {
        oprot.writeString(struct.identityCard);
      }
      if (struct.isSetIdentityType()) {
        oprot.writeI32(struct.identityType);
      }
      if (struct.isSetAlipay()) {
        oprot.writeString(struct.alipay);
      }
      if (struct.isSetWeixin()) {
        oprot.writeString(struct.weixin);
      }
      if (struct.isSetQq()) {
        oprot.writeString(struct.qq);
      }
      if (struct.isSetAddress()) {
        oprot.writeString(struct.address);
      }
      if (struct.isSetAvatar()) {
        oprot.writeString(struct.avatar);
      }
      if (struct.isSetBirthday()) {
        oprot.writeI64(struct.birthday);
      }
      if (struct.isSetSummary()) {
        oprot.writeString(struct.summary);
      }
      if (struct.isSetSignature()) {
        oprot.writeString(struct.signature);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetFocusNumber()) {
        oprot.writeI64(struct.focusNumber);
      }
      if (struct.isSetLoveNumber()) {
        oprot.writeI64(struct.loveNumber);
      }
      if (struct.isSetPage()) {
        oprot.writeI32(struct.page);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.pageSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(29);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.account = iprot.readString();
        struct.setAccountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mobile = iprot.readString();
        struct.setMobileIsSet(true);
      }
      if (incoming.get(6)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(7)) {
        struct.registerDate = iprot.readI64();
        struct.setRegisterDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastLoginDate = iprot.readI64();
        struct.setLastLoginDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.state = iprot.readI32();
        struct.setStateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.level = iprot.readI32();
        struct.setLevelIsSet(true);
      }
      if (incoming.get(12)) {
        struct.asker = iprot.readI32();
        struct.setAskerIsSet(true);
      }
      if (incoming.get(13)) {
        struct.answer = iprot.readI32();
        struct.setAnswerIsSet(true);
      }
      if (incoming.get(14)) {
        struct.identityCard = iprot.readString();
        struct.setIdentityCardIsSet(true);
      }
      if (incoming.get(15)) {
        struct.identityType = iprot.readI32();
        struct.setIdentityTypeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.alipay = iprot.readString();
        struct.setAlipayIsSet(true);
      }
      if (incoming.get(17)) {
        struct.weixin = iprot.readString();
        struct.setWeixinIsSet(true);
      }
      if (incoming.get(18)) {
        struct.qq = iprot.readString();
        struct.setQqIsSet(true);
      }
      if (incoming.get(19)) {
        struct.address = iprot.readString();
        struct.setAddressIsSet(true);
      }
      if (incoming.get(20)) {
        struct.avatar = iprot.readString();
        struct.setAvatarIsSet(true);
      }
      if (incoming.get(21)) {
        struct.birthday = iprot.readI64();
        struct.setBirthdayIsSet(true);
      }
      if (incoming.get(22)) {
        struct.summary = iprot.readString();
        struct.setSummaryIsSet(true);
      }
      if (incoming.get(23)) {
        struct.signature = iprot.readString();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(24)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(25)) {
        struct.focusNumber = iprot.readI64();
        struct.setFocusNumberIsSet(true);
      }
      if (incoming.get(26)) {
        struct.loveNumber = iprot.readI64();
        struct.setLoveNumberIsSet(true);
      }
      if (incoming.get(27)) {
        struct.page = iprot.readI32();
        struct.setPageIsSet(true);
      }
      if (incoming.get(28)) {
        struct.pageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

